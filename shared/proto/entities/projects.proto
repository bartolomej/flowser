syntax = "proto3";

import "entities/common.proto";

enum ProjectRequirementType {
  PROJECT_REQUIREMENT_UNSPECIFIED = 0;
  PROJECT_REQUIREMENT_MISSING_FLOW_CLI = 1;
  PROJECT_REQUIREMENT_UNSUPPORTED_FLOW_CLI_VERSION = 2;
}

message ProjectRequirement {
  ProjectRequirementType type = 1;
  MissingVersion missing_version_requirement = 2;
  message MissingVersion {
    string found_version = 1;
    string min_supported_version = 2;
  }
}

message Project {
  string id = 1;
  string name = 2;
  string filesystem_path = 3;
  // Blockchain data will be fetched from this block height
  // Set this -1 to start fetching from the latest block
  int32 start_block_height = 4;

  Gateway gateway = 5;
  Emulator emulator = 6;

  string created_at = 8;
  string updated_at = 9;
}

message Gateway {
  string rest_server_address = 1;
  string grpc_server_address = 2;
  ServiceStatus status = 3;
}

message Emulator {
  bool verbose_logging = 1;
  string log_format = 22;
  uint32 rest_server_port = 2;
  uint32 grpc_server_port = 3;
  uint32 admin_server_port = 21;
  uint32 block_time = 4;
  string service_private_key = 5;
  string database_path = 7;
  uint32 token_supply = 8;
  uint32 transaction_expiry = 9;
  uint32 storage_per_flow = 10;
  uint32 min_account_balance = 11;
  uint32 transaction_max_gas_limit = 12;
  uint32 script_gas_limit = 13;
  SignatureAlgorithm service_signature_algorithm = 14;
  HashAlgorithm service_hash_algorithm = 15;
  bool storage_limit = 16;
  bool transaction_fees = 17;
  bool persist = 19;
  bool with_contracts = 23;
  bool enable_grpc_debug = 25;
  bool enable_rest_debug = 26;
  bool use_simple_addresses = 27;
  bool snapshot = 29;
}
